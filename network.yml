AWSTemplateFormatVersion: "2010-09-09"
Description: CD12352 - Infrastructure as Code Project - Network

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: Udagram

  # The VPC CIDR is the IP range that we want to use for our VPC.
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  # The CIDR for the first public subnet
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/24

  # The CIDR for the second public subnet
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.1.0/24

  # The CIDR for the first private subnet
  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.2.0/24

  # The CIDR for the second private subnet
  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.3.0/24

Resources:
  # The VPC resource contains the CIDR block and the tags for the VPC.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  # Security Groups
  PublicSubnetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Public Subnet Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 # Allow HTTP
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0 # Allow HTTPS
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 # Allow SSH
      SecurityGroupEgress:
        - IpProtocol: -1 # Allow all outbound traffic

  # The Internet Gateway is a resource that allows the VPC to connect to the internet.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  # The Internet Gateway Attachment is a resource that attaches the Internet Gateway to the VPC.
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnets are the subnets that are connected to the internet.

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs ""] # Select the first AZ in the region
      MapPublicIpOnLaunch: true # This will automatically assign a public IP to instances launched in this subnet.
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs ""] # Select the second AZ in the region
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet2

  # Private Subnets are the subnets that are not connected to the internet.
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs ""] # Select the first AZ in the region
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs ""] # Select the second AZ in the region
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet2

  # NatGateway EIPs are the Elastic IPs that are used for the NAT Gateways.
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NatGateway1

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NatGateway2

  # NatGateways are used to allow instances in the private subnets to connect to the internet.
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NatGateway1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NatGateway2

  # Routing tables are used to route traffic between subnets and the internet.

  #Public Route Table is used to route traffic between public subnets and the internet.
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicRouteTable

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # Private Route Tables are used to route traffic between private subnets and the internet.
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRouteTable1

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRouteTable2

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  # Outputs are used to export information about the resources that were created.
  Outputs:
    VPCOutput:
      Description: A reference to the created VPC
      Value: !Ref VPC
      Export:
        Name: !Sub ${EnvironmentName}-VPC

    VPCPublicRouteTableOutput:
      Description: A reference to the public route table
      Value: !Ref PublicRouteTable
      Export:
        Name: !Sub ${EnvironmentName}-PublicRouteTable

    VPCPrivateRouteTable1Output:
      Description: A reference to the private route table in the first Availability Zone
      Value: !Ref PrivateRouteTable1
      Export:
        Name: !Sub ${EnvironmentName}-PrivateRouteTable1

    VPCPrivateRouteTable2Output:
      Description: A reference to the private route table in the second Availability Zone
      Value: !Ref PrivateRouteTable2
      Export:
        Name: !Sub ${EnvironmentName}-PrivateRouteTable2

    PublicSubnetsOutput:
      Description: A list of the public subnets
      Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
      Export:
        Name: !Sub ${EnvironmentName}-PUB-NETS

    PrivateSubnetsOutput:
      Description: A list of the private subnets
      Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
      Export:
        Name: !Sub ${EnvironmentName}-PRIV-NETS

    NatGateway1Output:
      Description: The first NAT Gateway ID
      Value: !Ref NatGateway1
      Export:
        Name: !Sub ${EnvironmentName}-NatGateway1

    NatGateway2Output:
      Description: The second NAT Gateway ID
      Value: !Ref NatGateway2
      Export:
        Name: !Sub ${EnvironmentName}-NatGateway2

    PublicSubnetSecurityGroupOutput:
      Description: The ID of the public subnet security group
      Value: !Ref PublicSubnetSecurityGroup
      Export:
        Name: !Sub ${EnvironmentName}-PublicSG
